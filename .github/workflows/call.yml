name: Trigger

on:
    workflow_dispatch:
      inputs:
        release_version:
          required: false
          type: string
          default: '0.0.0'
    push:
        branches:
            fix/update_url
            main

jobs:
  collect-data:
    runs-on: ubuntu-latest
    outputs:
        repository_name: ${{ steps.set_repository_name.outputs.repository_name }}
        version: ${{ inputs.release_version || steps.set_version.outputs.version }}
        release_type: ${{ steps.set_release_type.outputs.release_type }}
        organization: ${{ steps.set_organization.outputs.organization }}
        checksum_data: ${{ steps.build_checksum.outputs.checksum_data }}
        sbom: ${{ steps.generate_sbom.outputs.base64 }}
    steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        #Install node

        - name: Install Snyk
          run: |
            npm install -g snyk
        
        - name: Set Repository Name
          id: set_repository_name
          run: echo "repository_name=$(basename '${{ github.repository }}')" >> $GITHUB_OUTPUT
          #run: echo "repository_name=${{ github.repository }}" >> $GITHUB_OUTPUT

        - name: View GITHUB_REF
          run: echo ${GITHUB_REF}

        - name: Set Release Type
          id: set_release_type
          run: |
            BRANCH="${GITHUB_REF##*/}" 
            case "$BRANCH" in
                master|main)
                TYPE=production
                ;;
                dev|develop)
                TYPE=development
                ;;
                feature/*)
                TYPE=feature
                ;;
                *)
                TYPE=Manual
                ;;
            esac
            echo "$TYPE"
            echo "release_type=$TYPE" >> "$GITHUB_OUTPUT"

        - name: View VAR
          run: echo  ${{ vars.VALUE_STREAM }}

        - name: Set Organization
          id: set_organization
          run: |
            if [[ "${{ github.environment }}" == "stable" ]]; then
              echo "organization=stable" >> $GITHUB_OUTPUT
            elif [[ "${{ github.environment }}" == "sandbox" ]]; then
              echo "organization=sandbox" >> $GITHUB_OUTPUT
            else
              echo "organization=dev" >> $GITHUB_OUTPUT
            fi

        - name: Set Version
          id: set_version
          run: |
            echo "version=0.0.1" >> $GITHUB_OUTPUT

        - name: sha256 Checksum data
          id: sha256
          run: |
            file_path=./document.pdf
            checksum=$(sha256sum "$file_path" | awk '{print $1}')
            echo "$checksum"
            echo "[{\"file_path\": \"$file_path\", \"sha256\": \"$checksum\"}]" > sbom_checksum.json

        - name: sha512 Checksum data
          id: sha512
          run: |
            file_path=./document.pdf
            checksum=$(sha512sum "$file_path" | awk '{print $1}')
            echo "$checksum"
            jq --arg fp "$file_path" --arg ch "$checksum" \
              '. += [{"file_path": $fp, "sha512": $ch}]' sbom_checksum.json > tmp.json && mv tmp.json sbom_checksum.json

        - name: Build checksum array
          id: build_checksum
          shell: bash
          run: |
            checksum_data=$(cat sbom_checksum.json)
            echo "$checksum_data"
            # GitHub Actions: output multiline safely using HEREDOC syntax
            echo "checksum_data<<EOF" >> $GITHUB_OUTPUT
            echo "$checksum_data" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

        - name: Generate Input JSON
          run: |
            echo "{\"user\": \"monika\", \"data\":\"12345\"}" > input.json

        - uses: frostebite/File-To-Base64@master
          id: generate_sbom
          with:
            filePath: input.json

        - name: Save Base64 to a file
          run: echo "${{ steps.generate_sbom.outputs.base64 }}"

  send-data:
        needs: [collect-data]
        uses: MonikaSinghal-22/Repo2-action-test/.github/workflows/container_workflow.yml@v1.43
        with:
            repository_name: ${{needs.collect-data.outputs.repository_name}}
            version: ${{needs.collect-data.outputs.version}}
            release_type: ${{needs.collect-data.outputs.release_type}}
            checksum_data: ${{needs.collect-data.outputs.checksum_data}}
            user: ${{ github.actor }}
            team_name: team_test
            organization: ${{needs.collect-data.outputs.organization}}
            input-data: ${{ needs.collect-data.outputs.sbom }}